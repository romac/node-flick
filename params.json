{"name":"node-flick","tagline":"Post-receive hooks handler for Node.js.","body":"[![Build Status](https://secure.travis-ci.org/romac/node-flick.png?branch=master)](https://travis-ci.org/romac/node-flick)\r\n[![Dependencies Status](https://david-dm.org/romac/node-flick.png)](https://david-dm.org/romac/node-flick)\r\n# node-flick\r\n\r\nnode-flick is a [GitHub post-receive hooks](https://help.github.com/articles/post-receive-hooks) handler for Node.js.\r\n\r\n## Installation\r\n\r\nInstall the latest version by running\r\n\r\n    $ npm install flick\r\n\r\n## Usage\r\n\r\nLet's say you want to run `git pull --rebase` on a repository clone every time commits are pushed to GitHub.\r\n\r\nFirst, import everything we need (this assumes that you installed node-flick via the above command).\r\n\r\n```js\r\nvar connect = require('connect'),\r\n    shell = require('shelljs'),\r\n    flick = require('flick'),\r\n    app = connect();\r\n```\r\n\r\nThen, define the action to run once we'll receive the notification from GitHub.\r\n\r\n```js\r\nfunction gitPull(root, options)\r\n{\r\n    return function(req, res, next) {\r\n        var cmd = 'git pull' + (options.rebase ? ' --rebase' : '');\r\n\r\n        shell.cd(root);\r\n        shell.exec(cmd, function(code, output) {\r\n            console.log(cmd + ' exited with code ' + code);\r\n        });\r\n\r\n        next();\r\n    };\r\n}\r\n```\r\n\r\nTell node-flick to run that action everytime we receive a notification for a specific repository.\r\n\r\n```js\r\nvar handler = flick();\r\n\r\nhandler.use('your-username/a-repository', gitPull('/path/to/working-copy', { rebase: true }));\r\n```\r\n\r\nLet's then configure connect.\r\n\r\n```js\r\n// Parse body of POST requests\r\napp.use(connect.bodyParser());\r\n\r\n// Hook flick with express\r\napp.use(flick.whitelist({ local: true }));\r\napp.use(flick.payload());\r\napp.use(handler);\r\n```\r\n\r\nLaunch the HTTP server.\r\n\r\n```js\r\n// Thank GitHub for their niceness\r\napp.use(function(req, res) {\r\n    res.writeHead(200);\r\n    res.end('Thank you, dear friend.\\n');\r\n});\r\n\r\napp.listen(4001);\r\nconsole.log('flick is listening on port 4001');\r\n```\r\n\r\nNow, run the app with\r\n\r\n    $ node update.js\r\n\r\nAnd configure the endpoint in your repository settings on GitHub, under the **WebHooks** section.\r\n\r\nFrom now on, everytime you will push something to GitHub, the handler above will be triggered and the repository clone on the server will get updated.\r\n\r\n## Documentation\r\n\r\nnode-flick works very much like express. In fact, its API is a lot like express' one:\r\n\r\n### flick()\r\n\r\nCreate a middleware for express.\r\n\r\n```js\r\nvar express = require('express'),\r\n    flick = require('flick'),\r\n    app = express(),\r\n    handler = flick();\r\n\r\nhandler.use(function(req, res, next) {\r\n    console.log('Got a WebHook!');\r\n    next();\r\n});\r\n\r\napp.use('/webhook', handler);\r\napp.listen(3000);\r\n```\r\n\r\n### flick.whitelist([options])\r\n\r\nCreate a middleware for express, that makes sure that the incoming request comes from GitHub.  \r\nIt takes an optional object argument with can hold the following properties:\r\n* `known` Check the request's remote IP against the known GitHub IPs. Defaults to `true`.\r\n* `ips` An array of allowed IPs, that will be merged with GitHub's known IPs if `known` is enabled. Defaults to `[]`.\r\n* `local` Allow requests from the local machine. It's basically a shortcut for `ips: ['127.0.0.1']`. Defaults to `false`.\r\n\r\n```js\r\nvar express = require('express'),\r\n    flick = require('flick'),\r\n    app = express(),\r\n    handler = flick();\r\n\r\nhandler.use(function(req, res, next) {\r\n    console.log('Got a WebHook!');\r\n    next();\r\n});\r\n\r\napp.use('/webhook', flick.whitelist({ known: true, ips: ['192.168.1.23'], local: true }));\r\napp.use('/webhook', handler);\r\napp.listen(3000);\r\n```\r\n\r\n### flick.payload([name])\r\n\r\nCreate a middleware for express, that checks if the payload sent by GitHub is there, parse it, and assign it to `req.flick.payload`.  \r\nYou don't have to use it, but it's quite handy to avoid doing that check and calling `JSON.parse` on `req.body.payload` manually.\r\n\r\nTakes an optional argument holding the name of the POST body field that holds the payload. Defaults to `payload`, which is what GitHub uses.\r\n\r\n```js\r\nvar express = require('express'),\r\n    flick = require('flick'),\r\n    app = express(),\r\n    handler = flick();\r\n\r\nhandler.use(function(req, res, next) {\r\n    var repository = req.flick.payload.repository;\r\n    console.log('Got WebHook for %s/%s', repository.owner.name, repository.name);\r\n    next();\r\n});\r\n\r\napp.use('/webhook', flick.whitelist({local: true}));\r\napp.use('/webhook', flick.payload());\r\napp.use('/webhook', handler);\r\napp.listen(3000);\r\n```\r\n\r\n### handler.use([repo], fn)\r\n\r\nUse the given handler `fn(req, res, next)` with optional `repo`, whose form is `username/repository`, defaulting to `*`.  \r\n\r\n`req` represents the current HTTP request. It's the same object that express would give us, only augmented with a `flick` property which is an object with for now only one property `payload`, holding the payload GitHub sent us.  \r\n\r\n`res` represents the current HTTP response. It's exactly the same object that express would give us.  \r\n\r\nCalling `next` will call the next flick handler, or give the control back to express if there aren't any.\r\n\r\nSay you want to log to the console whenever a WebHook is fired, for any repository this hook is configured for:\r\n```js\r\nhandler.use(function(req, res, next) {\r\n    var repository = req.flick.payload.repository;\r\n    console.log('Got WebHook for %s/%s', repository.owner.name, repository.name);\r\n    next();\r\n});\r\n```\r\n\r\nOr maybe you only want to do that for a specific repository:\r\n```js\r\nhandler.use('romac/node-houdini', function(req, res, next) {\r\n    console.log('Got WebHook for Houdini!');\r\n    next();\r\n});\r\n```\r\n\r\n## License\r\n\r\nnode-flick is released under the [MIT License](http://romac.mit-license.org).\r\n","google":"UA-21073895-1","note":"Don't delete this file! It's used internally to help with page regeneration."}